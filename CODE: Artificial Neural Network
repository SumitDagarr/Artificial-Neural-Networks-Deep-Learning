import numpy as np
import pandas as pd
df = pd.read_csv('Churn_Modelling.csv')

X = df.iloc[:,3:13]
y = df.iloc[:,13]

X = X.join(pd.get_dummies(X[['Gender', 'Geography']], drop_first = True))
X.drop(['Gender', 'Geography'], axis = 1, inplace = True)

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X = scaler.fit_transform(X)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3)

import keras
from keras.models import Sequential
from keras.layers import Dense

model = Sequential()
model.add(Dense(6, activation= 'relu', input_dim =  11))
model.add(Dense(6, activation='relu'))
model.add(Dense(1, activation='sigmoid'))
model.compile(optimizer= 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])
model.fit(X_train, y_train, batch_size= 10, epochs= 100)
predictions = model.predict(X_test)
predictions = (predictions > 0.5)

from sklearn.metrics import classification_report
print(classification_report(y_test, predictions))


from keras.wrappers.scikit_learn import KerasClassifier
from sklearn.model_selection import cross_val_score

def built_fun():
    model = Sequential()
    model.add(Dense(6, activation = 'relu', input_dim= 11))
    model.add(Dense(6, activation= 'relu'))
    model.add(Dense(1, activation= 'sigmoid'))
    model.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])
    return model

classifier = KerasClassifier(build_fn= built_fun, batch_size = 10, epochs = 100)
accuracies = cross_val_score(estimator = classifier, X = X_train, y = y_train, cv = 10, n_jobs= -1)

avg_accuracy = accuracies.mean()
accuries.std()
